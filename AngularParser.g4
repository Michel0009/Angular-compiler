parser grammar AngularParser;

options {tokenVocab = AngularLexer;}

page: imports+ component+ class+;

imports: IMPORT OPEN_BRACE (COMPONENT|IDENTIFIER) (COMMA IDENTIFIER)* CLOSE_BRACE FROM STRING_VALUE SEMICOLON;

component: AT COMPONENT OPEN_PAREN OPEN_BRACE componentBody COMMA? CLOSE_BRACE CLOSE_PAREN;

componentBody: (IDENTIFIER COLON STRING_VALUE) (COMMA IDENTIFIER COLON STRING_VALUE)* (COMMA IDENTIFIER COLON BACKTICK htmlBlock BACKTICK)?  (COMMA componentStyles)? (COMMA componentImport)?;

componentImport: IMPORTS COLON SQUARE_OPEN_BRACKET (COMPONENT|IDENTIFIER) (COMMA IDENTIFIER)* SQUARE_CLOSE_BRACKET;

componentStyles: STYLES COLON SQUARE_OPEN_BRACKET BACKTICK (styleElements)* BACKTICK COMMA? SQUARE_CLOSE_BRACKET;

styleElements: (((DOT | HASHTAG)? IDENTIFIER (COMMA? (DOT | HASHTAG)? IDENTIFIER)*) | MULTIPLY) OPEN_BRACE (styleElementsBody)* CLOSE_BRACE;

styleElementsBody: IDENTIFIER COLON (IDENTIFIER|(NUMBER_VALUE (MODULUS | IDENTIFIER)?)) SEMICOLON;

htmlBlock: htmlElement+;

htmlElement: (LESS_THAN IDENTIFIER ((IDENTIFIER|CLASS) ASSIGN STRING_VALUE)? (htmlElementProperties)* GREATER_THAN (forStatement |ifStatement |htmlElementContent)*  LESS_THAN DIVIDE IDENTIFIER GREATER_THAN)
|( LESS_THAN IDENTIFIER ((IDENTIFIER|CLASS) ASSIGN STRING_VALUE)? (htmlElementProperties)* DIVIDE GREATER_THAN);

htmlElementProperties: ((OPEN_PAREN? IDENTIFIER CLOSE_PAREN?) | (SQUARE_OPEN_BRACKET IDENTIFIER SQUARE_CLOSE_BRACKET)) ASSIGN STRING_VALUE;

htmlElementContent: tsxBlock | htmlElement |IDENTIFIER;

tsxBlock: OPEN_BRACE OPEN_BRACE IDENTIFIER (DOT IDENTIFIER)* (operation NUMBER_VALUE)? CLOSE_BRACE CLOSE_BRACE;

operation: PLUS | MINUS | MULTIPLY | DIVIDE;

forStatement: AT FOR OPEN_PAREN IDENTIFIER OF IDENTIFIER SEMICOLON TRACK IDENTIFIER CLOSE_PAREN OPEN_BRACE htmlElement* CLOSE_BRACE;

ifStatement: AT IF OPEN_PAREN condition ((LOGICAL_AND | LOGICAL_OR) condition)* CLOSE_PAREN OPEN_BRACE htmlElement* CLOSE_BRACE;

class:EXPORT CLASS IDENTIFIER ((EXTENDS | IMPLEMENTS) IDENTIFIER)? OPEN_BRACE classBody* CLOSE_BRACE;

classBody: (modifiers? (array | var | function)) | constructor ;

array: (CONST | LET | VAR)? IDENTIFIER (COLON arrayMethod)? ASSIGN SQUARE_OPEN_BRACKET arrayBody SQUARE_CLOSE_BRACKET SEMICOLON;

arrayMethod: (dataType SQUARE_OPEN_BRACKET SQUARE_CLOSE_BRACKET) | (ARRAY LESS_THAN dataType GREATER_THAN)| (OPEN_BRACE (IDENTIFIER COLON dataType) (COMMA IDENTIFIER COLON dataType)* COMMA? CLOSE_BRACE);

arrayBody: (NUMBER_VALUE (COMMA NUMBER_VALUE)* COMMA?) | (STRING_VALUE (COMMA STRING_VALUE)* COMMA?) | (object (COMMA object)* COMMA?) | (BOOLEAN_VALUE (COMMA BOOLEAN_VALUE)* COMMA?);

object: OPEN_BRACE (objectBody (COMMA objectBody)* COMMA?)? CLOSE_BRACE;

objectBody: IDENTIFIER COLON (STRING_VALUE | NUMBER_VALUE | (SQUARE_OPEN_BRACKET arrayBody SQUARE_CLOSE_BRACKET) | BOOLEAN_VALUE);

var: stringVar|boolVar|numVar|anyVar;

stringVar:(CONST | LET | VAR)? IDENTIFIER COLON STRING ASSIGN STRING_VALUE SEMICOLON;
boolVar:(CONST | LET | VAR)? IDENTIFIER COLON BOOLEAN ASSIGN BOOLEAN_VALUE SEMICOLON;
numVar:(CONST | LET | VAR)? IDENTIFIER COLON NUMBER ASSIGN NUMBER_VALUE SEMICOLON;
anyVar:(CONST | LET | VAR)? IDENTIFIER COLON ANY ASSIGN (STRING_VALUE|BOOLEAN_VALUE|NUMBER_VALUE|NULL) SEMICOLON;

function: IDENTIFIER OPEN_PAREN (parameter (COMMA parameter)*)? CLOSE_PAREN (COLON (dataType|VOID))? OPEN_BRACE bodyStatement* CLOSE_BRACE ;

parameter: IDENTIFIER COLON dataType;

dataType:STRING | BOOLEAN | NUMBER | ANY;
// switch | tryCatch
bodyStatement:((THIS DOT)? IDENTIFIER ASSIGN (IDENTIFIER | NUMBER_VALUE | STRING_VALUE | BOOLEAN_VALUE) SEMICOLON) | array | var | forLoop | ifCondition | console | functionCall | (IDENTIFIER multiOperation SEMICOLON)|return;

forLoop:FOR OPEN_PAREN ((VAR|LET)? IDENTIFIER ASSIGN NUMBER_VALUE SEMICOLON IDENTIFIER (EQUAL|NOT_EQUAL|EQUALS_OR_LESS_THAN|EQAULS_OR_GREATER_THAN|LESS_THAN|GREATER_THAN) NUMBER_VALUE SEMICOLON IDENTIFIER multiOperation ) CLOSE_PAREN OPEN_BRACE bodyStatement* (CONTINUE|BREAK)? CLOSE_BRACE;
// switch
functionCall: IDENTIFIER OPEN_PAREN ((((THIS DOT)? IDENTIFIER) | STRING_VALUE | NUMBER_VALUE | BOOLEAN_VALUE) (COMMA ((THIS DOT)? IDENTIFIER) | STRING_VALUE | NUMBER_VALUE | BOOLEAN_VALUE)*)? CLOSE_PAREN SEMICOLON;

return: RETURN (STRING_VALUE|NUMBER_VALUE|BOOLEAN_VALUE)? SEMICOLON;

ifCondition: IF OPEN_PAREN condition ((LOGICAL_AND | LOGICAL_OR) condition)*  CLOSE_PAREN OPEN_BRACE? bodyStatement* CLOSE_BRACE?;

condition: ((IDENTIFIER|functionCall) ((EQUAL|NOT_EQUAL|EQUALS_OR_LESS_THAN|EQAULS_OR_GREATER_THAN|LESS_THAN|GREATER_THAN) (NUMBER_VALUE|STRING_VALUE|BOOLEAN_VALUE|IDENTIFIER))?);

multiOperation: ( (INCREASE|DECREASE)|((MULTIPLICATION_ASSIGNMENT|DIVISION_ASSIGNMENT|ADDITION_ASSIGNMENT|SUBTRACTION_ASSIGNMENT) (NUMBER_VALUE| (THIS DOT)? IDENTIFIER )));

console: CONSOLE DOT LOG OPEN_PAREN (STRING_VALUE | functionCall | IDENTIFIER) (PLUS (STRING_VALUE | functionCall | IDENTIFIER))* CLOSE_PAREN SEMICOLON;

modifiers: PUBLIC | PRIVATE | PROTECTED | READ_ONLY;

constructor: CONSTRUCTOR OPEN_PAREN (parameter (COMMA parameter)*)? CLOSE_PAREN OPEN_BRACE constructorBody* CLOSE_BRACE;

constructorBody: ((THIS DOT)? IDENTIFIER ASSIGN ( functionCall | NUMBER_VALUE | STRING_VALUE | BOOLEAN_VALUE) SEMICOLON) | ((THIS DOT)? IDENTIFIER multiOperation SEMICOLON) | array | var | functionCall | forLoop | ifCondition | console ;

//switch: SWITCH OPEN_PAREN IDENTIFIER CLOSE_PAREN OPEN_BRACE switchBody CLOSE_BRACE;
//
//switchBody: CASE IDENTIFIER COLON caseBody (CASE IDENTIFIER COLON caseBody)* (DEFAULT COLON caseBody)?;
//
//caseBody: (functionCall | console | (IDENTIFIER multiOperation SEMICOLON) | IDENTIFIER ASSIGN (STRING_VALUE|NUMBER_VALUE|BOOLEAN_VALUE)) BREAK SEMICOLON;

//tryCatch: try catch1 finally1?;
//
//try:TRY OPEN_BRACE (forLoop|ifCondition | switch | console | array | var | functionCall | multiOperation |IDENTIFIER ASSIGN (STRING_VALUE|NUMBER_VALUE|BOOLEAN_VALUE))  CLOSE_BRACE;
//
//catch1: CATCH (OPEN_PAREN IDENTIFIER CLOSE_PAREN)? OPEN_BRACE (console | functionCall |IDENTIFIER ASSIGN (STRING_VALUE|NUMBER_VALUE|BOOLEAN_VALUE)) CLOSE_BRACE;
//
//finally1: FINALLY OPEN_BRACE (forLoop|ifCondition | switch | console | array | var | functionCall | multiOperation |IDENTIFIER ASSIGN (STRING_VALUE|NUMBER_VALUE|BOOLEAN_VALUE)) CLOSE_BRACE;